* {
    border-style: solid;
    border-width: 0px;
    border-color: hsl(0, 0%, 80%);
    box-sizing: border-box;
    background-color: transparent;
}

body {
    margin-top: -2px;  /* keep from having scrollbar */
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow-y: hidden;
}

#app {
    flex: 0 1 auto;
    display: flex;
    flex-direction: row;
}

#root.table {
    flex: 0 1 auto;
    min-width: 0;
}

#root.wrapped-element, #root.item {
    width: 100%;
    flex: 0 1 auto;
    overflow-x: hidden;
    overflow-y: auto;
    margin: 0;
}

.tab-text-holder {
    margin-right: 54px;
}

.selected {
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}

/* In general, if there is a border, there is a matching negative margin
   on the right and bottom. That allows boxes to stack. Containment may
   require additional negative margins on the top and left.

   Usually, the border is set by the containing DOM element, but sometimes
   it is set explicitly. */
.bordered {
    border-width: 2px;
    margin: 0px -2px -2px 0px;
}

/* --- Generic indentation --- */

.indent-wrapper {
    display: flex;
    flex-direction :column;
    padding-left: 8px;
}

.indent-wrapper > * {
    flex-grow: 1;
}

/* --- Basic items and stacks of items --- */

.item.editable, .item > .editable { 
    padding: 3px;
}

.item.with-elements > :last-child {
    margin: 0px 5px 5px 6px;
}

.editable {
    min-height: 15px; /* Make no-content cells have minimum height */
}

/* For ??? in column headers */
.placeholder {
    font-size: smaller;
    font-style: oblique;
    color: rgba(0, 0, 0, 0.4);
}

.content-text {
    min-height: 20px;
    overflow-wrap: break-word;
}

/* grayish indicators of places where there is no current content */
.editable:not(.content-text) {
    background-color: hsl(0, 0%, 95%);
}

.item-stack > .item {
    margin: 0px 3px 0px 3px;
}

.item-stack > .item.editable, .item-stack > .item > .editable { 
    padding: 3px 0px 3px 0px;
}

.item-stack > .item.with-elements > :last-child {
    margin: 0px 2px 5px 3px;
}

.item-stack > .item + .item {
    border-width: 2px 0px 0px 0px;
}

.for-multiple, .for-multiple > .item-stack {
    vertical-align: middle;
}

.item-stack {
    vertical-align: top;
}

.with-elements {
    text-align: left;
}

.elements-wrapper {
    /* The boxes inside have margins of -2px all around, so this gives
       three pixels, except for 6 on the left. */
    padding: 5px 5px 5px 8px;
}

/* --- tabs --- */

.tabs-holder, .tab-sequence {
    flex: none;
    display: flex;
    align-items: stretch;
    z-index: 1;  /* Make the :before and :after borders go in front */
    position:relative;  /* Make the z-index effective */
    /* The tabs are give in reverse order, so the logically first tab will
       come on top in the stacking order. */
    flex-direction: row-reverse;
    justify-content: flex-end;
}

.tabs-holder {
    margin-bottom: 2px;
}

.tab-tree {
    background-color: white;
}

.multi-tab {
    text-align: center;
}

.tab {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    text-align: center;
    border-top-width: 2px;
    border-bottom-width:2px;
    margin-left: 12px;
    margin-right: 12px;
    min-width: 20px;
    width: fit-content;
    position: relative;
}

.tab:before, .tab:after{
    height: 100%;
    /* Make its background override edges of on other tabs, but not content. */
    width: 30px;
    background-color: white;
    z-index: -1;    
    border-style: solid;
    border-color: hsl(0, 0%, 80%);
    display: block;
    content:" ";
    top: -2px;
    position: absolute;
    transform-origin: top;
}

.tab:before {
    border-width: 2px 0px 2px 2px;
    border-top-left-radius: 7px;
    left: -8px;
    transform:skewX(-15deg);
}

.tab:after {
    border-width: 2px 2px 2px 0px;
    border-top-right-radius: 7px;
    right: -8px;
    transform:skewX(15deg);
}

.tab.item-stack {
    /* Leave room for selection box-shadow. */
    padding-top: 2px;
}

.tab.empty-child.empty-child.empty-child.empty-child {
    background-color: transparent;
    width: 40px;
}

.tab.virtualTab, .tab.virtualTab:before, .tab.virtualTab:after { 
     background-color: hsl(0, 0%, 95%);
}

.tab.virtualTab {
    position: relative;
}

.tab.complex {
    background-color: transparent;
    width: 150px;
}

.tab.chosen, .tab-tree.chosen {
    z-index: 2;
}

.tab.chosen {
    box-shadow: inset 0px 2px hsl(0, 0%, 80%);
    border-bottom: 0px;
}

.tab.chosen.selected {
    box-shadow: inset 0px 2px hsl(0, 0%, 80%),
}

 /* Put the selected box shadow on the select holder, because the :left and
    :right of the tab can overlap its contents. */
.tab.chosen > .select_holder {
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}

.tab.chosen:before {
    box-shadow: inset 2px 2px hsl(0, 0%, 80%);
    border-bottom: 0px;
}

.tab.chosen:after {
    box-shadow: inset -2px 2px hsl(0, 0%, 80%);
    border-bottom: 0px;
}

/* --- tags --- */

.tag {
    background-color: hsl(194, 100%, 88%);
}

.tag > .tag.tag.tag.tag.tag.tag {
    background-color: transparent;
}

.item:not(.tag), .item-stack:not(.tag) {
    background-color: white;
}

.editable.tag.tag.tag.tag:not(.content-text),
.tag.tag.tag.tag > .editable:not(.content-text) {
    background-color: hsl(194, 50%, 88%);
}

/* --- label-element pairs: one column format --- */

.horizontal-tags-element {
    display: flex;
    flex-direction: row;
}

.horizontal-tags-element.narrow > * {
    border-width: 2px;
    margin-right: -2px;
    margin-bottom: -2px;
}

.horizontal-tags-element.narrow > :first-child {
    border-bottom-left-radius: 7px;
    border-top-left-radius: 7px;
}

.horizontal-tags-element.narrow > :first-child {
    width: 12px;
}

.horizontal-tags-element.narrow > :last-child {
    flex: 1;
}

.wrapped-element {
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    border-bottom-left-radius: 7px;
    border-width: 2px;
    margin: 0px -2px -2px 0px;
    background-image:
    linear-gradient(to left,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.stack.has-border > .wrapped-element {
    margin-left: -2px;
}

.stack.has-border > .wrapped-element:first-child {
    margin-top: -2px;
}

.wrapped-element > .indent-wrapper {
    flex-grow: 1;
}

.wrapped-element > .indent-wrapper > .item,
.wrapped-element > .indent-wrapper > .item-stack,
.wrapped-element > .indent-wrapper > .stack > .item,
.wrapped-element > .indent-wrapper > .stack > .item-stack {
    border-width: 2px;
    margin-bottom: -2px;
    margin-right: -2px;
}

.stack > .wrapped-element:last-child {
    display: flex;
    flex-direction: column;
}

.wrapped-element ~ .horizontal-tags-element {
    margin-top: 2px;
}

/* --- label-element pairs: two column format --- */

.horizontal-tags-element.wide > :last-child {
    width: 70%;
    border-width: 2px;
    margin: 0px -2px -2px 0px;
}

.horizontal-value-last {
    border-bottom-width: 2px;
    width: 100%;
    display: flex;
    flex-direction: row;
}

.horizontal-value-last > .item-stack {
    width: 100%;
}

.horizontal-tags-element.wide > :last-child.horizontal-value-last {
    border-bottom-width: 4px;
}

.stack.has-border > .horizontal-tags-element {
    margin-left: -2px;
}

.stack.has-border > .horizontal-tags-element:first-child {
    margin-top: -2px;
}


.horizontal-header {
    flex: 1;
    display: flex;
    flex-direction: row;
    border-left-width: 2px;
}

.horizontal-header > :first-child {
    flex: 1;
}

.horizontal-header.indent {
    padding-left: 8px;
}

.horizontal-header.top-border.bottom-border {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    text-align: right;
    border-top-width: 2px;
    border-bottom-width: 2px;
    margin-bottom: -2px;
    border-top-left-radius: 7px;
    border-bottom-left-radius: 7px;
}

.horizontal-header.top-border {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    border-top-width: 2px;
    border-top-left-radius: 7px;
}

.horizontal-header.bottom-border {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    border-bottom-width: 2px;
    margin-bottom: -2px;
    border-bottom-left-radius: 7px;
}

.horizontal-header.bottom-border.indent > .horizontal-header {
    margin-bottom: 0px;
}

.horizontal-header{
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

/* --- tables --- */

.table {
    display: flex;
    flex-direction: column;
    width: fit-content;
}

.table-top {
    flex: none;
    display: flex;
    border-width: 2px;
    border-bottom-width: 0px;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
     /* Two less than the table row, because it's border is in its margin */
    margin-right: 54px;
}

.table-corner {
    width: 3px; /* Doesn't include either border */
}

.table-condition {
    border-bottom-width: 2px;
    flex: 1 0 auto;
}

.table-body {
    flex: 0 1 auto;
    display: flex;
}

.table-indent {
    width: 7px;
    border-left-width: 2px;
    border-right-width: 2px;
    border-bottom-width: 2px;
    border-bottom-left-radius: 7px;
    margin-bottom: 0px;
}

.table-main {
    margin-top: 2px;
    margin-left: 2px;
    flex: 0 1 auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    overflow-x: auto;
    overflow-y: hidden;
}

.table-rows {
    flex: 0 1 auto;
    /* Wants to be visible, but that gets turned into auto */
    overflow-x: hidden;
    overflow-y: scroll;
    padding-right: 56px; /* Leave room for edit input box. */
}

.table-rows > :first-child {
    margin-top: -2px;
}

.column-header-sequence {
    flex: none;
    display: flex;
    align-items: stretch;
}

.table-main > .column-header-sequence {
    border-bottom-width: 2px;
}

.column-header-sequence > * {
    flex: 0 0 auto;
}

.column-header > .column-header-sequence
   > .editable.editable.editable.editable.editable:not(.content-text) {
    background-color: transparent;
    margin-right: -2px;
    margin-bottom: -2px;		    
}

.column-header {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    text-align: center;
    border-width: 2px;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    margin: 0px -2px -2px 0px;
    min-height: 25px;
}

/* Make the header fill all the available space, for a better selection box. */
.column-header > :first-child.content-text {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    flex-grow: 1;
    flex-basis: auto;
}

.column-header.with-children {
    border-bottom-width: 0px;
}

 
.column-header > .column-header,
.column-header > .wrapped-element,
.column-header > .column-header-sequence > :first-child {
    margin-left: -2px;
}

.column-header > .wrapped-element,
.column-header > .column-header:first-child {
    margin-top: -2px;
}

.column-header.tag, .table-top.tag {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to left,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.column-header.horizontal-tags-element {
    display: flex;
    flex-direction: row;
}

.column-header.horizontal-tags-element > * {
    margin-top: -2px;
}

.column-header > .horizontal-tags-element {
    margin-top: -2px;
    margin-left: -2px;
}

.column-header > .wrapped-element:first-child {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

.column-header > .horizontal-tags-element:first-child {
    flex-grow: 1;
}

.column-header > .horizontal-tags-element > * {
    display: flex;
    align-items: flex-end;
}

.column-header > .horizontal-tags-element > :last-child {
    justify-content: center;
}

.column-header.horizontal-tags-element > :first-child {
    margin-left: -2px;
}

.column-header.horizontal-tags-element > :last-child {
    border-top-right-radius: 7px;
}

.table-indent.tag {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.table-row {
    display: flex;
    align-items: stretch;
}

.table-rows > :last-child > .table-cell {
    margin-bottom: 0px;
}

.table-cell {
    width: 150px;
    min-height: 20px;
    flex: none;
    border-width: 2px;
    margin: 0px -2px -2px 0px;
}

.table-cell.virtual-column {
    width: 35px;
}


/* --- narrow interpretation --- */

.selectors {
    /* Allow the box shadow to overlap the selected. */
    overflow: visible;
}

.narrow-interpretation .selectors {
    box-shadow: 1px 0px 3px 3px hsl(0, 0%, 85%),
                7px 9px 4px 2px hsla(0, 0%, 0%, .7);
}

.narrow-interpretation .selectors .tag,
.narrow-interpretation .selectors.tag {
    background-color: hsl(194, 100%, 70%);
}

.narrow-interpretation .selectors .tag > .tag,
.narrow-interpretation .selectors.tag > .tag{
    background-color: transparent;
}

.narrow-interpretation .selectees {
    opacity: 0.3;
}

.narrow-interpretation .selector-scope .selectors.selectors {
    box-shadow: 0px 0px transparent;
}

.narrow-interpretation .selector-scope .selectees.selectees {
    opacity: 1;
}

/* --- toolbar --- */

.toolbar {
    flex: none;
    background-color: hsl(0, 0%, 97%);
    width: 100%;
    padding-top: 6px; /* Make up for the -2px on body */
    padding-bottom: 4px;
    padding-left: 10px;
    margin-bottom: 5px;
    border-color: hsl(0, 0%, 75%);
    border-width: 0px 0px 1px 0px;
}

.tool {
    position: relative;
    height: 34px;
    width: 34px;
    font-size: 20px;
    text-align: center;
    vertical-align: top;
    background-color: hsl(0, 0%, 95%);
    border-width: 1px;
    border-radius: 2px;
    border-color: hsl(0, 0%, 75%);
    margin: 0px 7px 0px 7px;
    display: inline-block;
}

.toolgap {
    width: 20px;
    display: inline-block;
}

.tooltip {
    visibility: hidden;
    background-color: hsl(0, 0%, 40%);
    font-size: 100%;
    box-sizing: content-box;
    width: max-content;
    max-width: 120px;
    color: #fff;
    text-align: center;
    padding: 2px 4px;
    border-radius: 6px;
 
    /* Position the tooltip text */
    position: absolute;
    top: 100%;
    left: 50%; /* 50% here is the container's width. */
    transform: translate(-50%, 5px); /* 50% here is the tip's width. */
    z-index: 2;
}

/* Make a triangle for the tooltip by adding one more thing after the text,
   which will consist of only border with only one side non-transparent. */
.tool .tooltip::after, .selection .tooltip::after {
    content: " ";
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent hsl(0, 0%, 40%) transparent;
    position: absolute;
    top: -10px; /* Above the top of the tooltip */
    left: 50%;
    margin-left: -5px;
}

.tool:hover{
    background-color: hsl(0, 0%, 97%);
    border-color: hsl(0, 0%, 60%);
    border-width: 2px;
    border-radius: 3px;
}

.tool:hover > img {
    margin: -1px 0px 0px -1px;
}

/* Show the tooltip text when you mouse over the tool */
.tool:hover .tooltip, .selection:hover .tooltip {
    visibility: visible;
    transition-delay: 1s;
}

/* --- alternate interpretation link --- */

#alternate_interpretation_holder {
    visibility: hidden;
    position: absolute;
    top: 0;
    left: 50%; /* 50% here is the container's width. */
    transform: translate(-50%, 0px); /* 50% here is the link's width. */
    z-index: 1;
    background-color: cornsilk;
    border-width: 1px;
    border-color: orange;
    border-radius: 3px;
    font-family: sans-serif;
    font-size: 100%;
    font-weight: bold
    box-sizing: content-box;
    width: max-content;
    text-align: center;
    padding: 2px 4px;
}

#alternate_interpretation_holder > * {
    display: inline-block;
    margin-left: 1ex;
}

#alternate_interpretation {
    color: blue;
    text-decoration: underline;
}

#alternate_interpretation:hover {
    cursor: pointer;
}

#alternate_interpretation_holder.visible {
    visibility: visible;
}

/* --- select holder --- */

.editable {
    position: relative; /* To make select_holder position relative to it */
}

#select_holder {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1; /* To allow overflow content to cover adjacent cells */
}

/* Match the size of the containing box, so the scope tools will
   be positioned properly relative to the containing box, and so we won't
   capture clicks on other boxes. */
.editable > #select_holder {
    display: flex;
    width: 100%;
    height: 100%;
}

#select_holder.editing {
    background-color: cornsilk;
    box-shadow: 5px 5px 3px grey;
    min-width: 200px;
    min-height: fit-content;
}

#edit_input {
    display: none;
    flex-grow: 1;
    font-size: 100%;
    height: auto;
    resize: none;
}

#select_holder.editing > #edit_input {
    display: block;
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}

/* Scope selector tools */

#scope_holder {
    width: 84px;
    background-color: white;
    border-width: 0px 2px 2px 2px;
    padding: 0px;
    border-color: grey;
    border-style: solid;
    display: none;
    position: absolute;
    left: 0px;
    top: 100%;
}

.selectors #scope_holder {
    display: inline-block;
}

#scope_holder > .tool {
    height: 40px;
    width: 40px;
    border-width: 0px;
    border-radius: 0px;
    padding: 3px;
    margin: 0px;
    display: inline-block;
}

#scope_holder > .tool > img {
    opacity:0.4;
}

#scope_holder > .tool:hover {
    background-color: hsl(0, 0%, 95%);
}

#scope_holder > .tool:hover > img {
    opacity: 1.0;
    margin: 0px;
}

#scope_holder > .tool.picked {
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
    border-color: hsl(200, 100%, 90%);
}

#scope_holder > .tool.picked > img {
    opacity: 1.0;
}

