# To get the latest from github:
git pull

# to see what branches there are and which I'm on:
git branch -a

# to change branch
git checkout <branch>

# To run locally
java uberjar
java -jar target/cosheet-0.1.3-SNAPSHOT-standalone.jar


# To profile:
# Bring up Java Mission Control
/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/bin/jmc &
# Run the app, enabling flight recorder with a deep stack record
java -jar target/cosheet-0.1.3-SNAPSHOT-standalone.jar -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:FlightRecorderOptions=stackdepth=256
# On mission control, on the File Menu, select connect, and connect to the process.
# Then select flight recorder, and select "start flight recording".
# On the console, select the process, and flight recorder.
# On the flight recorder, select code. At the bottom, you can select stack trace.


1. Setup an AWS EC2 instance
Follow the “Setting up AWS” instructions on https://www.nginx.com/blog/setting-up-nginx/
After step 13, enable Hostname on VPC by:
Goto VPC services (Services -> Resource Group ->
Select VPC in use
Action -> Edit DNS Hostname
Enable DNS Hostname

2. Setup Nginx
Continue with instructions in the “Installing NGINX Software” section https://www.nginx.com/blog/setting-up-nginx/
Stop after completing step 10

DON'T DO THIS. use the conf file in cosheet/aws/etc/ngnix/conf.d.
3. Setting up Nginx as proxy server
cd /etc/nginx/conf.d 
sudo cp default.conf server1.conf
sudo mv default.conf default.conf.bak
sudo vi server1.conf
and edit content to become: 

server {
    listen       80;
    server_name  localhost;

    location / {
 	proxy_pass http://127.0.0.1:3000;
    }

…
}
      e. restart nginx: sudo nginx -s reload
      f. For adding SSL cert, see https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04

4. Install Java
sudo apt install default-jre

5. Copy cosheet jar and cosheet-db.mv.db to ec2 server
  On a local terminal:
cd <source root>/ 
# Build cosheet
lein uberjar
# scp cosheet jar to ec2 server. For example,
scp -i "~/Dropbox/cosheet/aws/cosheet.pem" target/cosheet-0.1.2-SNAPSHOT-standalone.jar ubuntu@cosheet.com:
scp <source root>/cosheet-db.mv.db to ec2 server

6. Setup directories on EC2 server
ssh to server (e.g., ssh -i "cosheet.pem" ubuntu@cosheet.com)
mkdir ~/cosheet
mkdir ~/cosheet/userdata
mkdir ~/cosheet/userdata/<username> for every user in dB
cp ~/cosheet-db.mv.db ~/cosheet
cp ~/cosheet-0.1.2-SNAPSHOT-standalone.jar ~/cosheet

7. Start cosheet server (from the server ssh)
cd cosheet
nohup java -jar cosheet-0.1.2-SNAPSHOT-standalone.jar > cosheet.log &
See logs by “tail -f cosheet.log”

#To make cosheet.com point to the server:
Go to the aws console (aws.amazon.com).
Click EC2 dashboard.
Click Elastic IPs.
Choose the one IP, and associate it with the image.

8. Stop cosheet server
Find cosheet’s Java process Id:  “ps aux | grep java”
Kill -9 <process Id>

To access it from the web, go to the aws EC2 console, click on "connect to your instance,  copy the domain name, and put that in the browser url bar.

Setting up SSL
# ssh to the server, then:
openssl req -new -newkey rsa:2048 -nodes -keyout cosheet.key -out cosheet.csr
# Fill in all the data
scp -i "~/Dropbox/cosheet/aws/cosheet.pem" ubuntu@cosheet.com:cosheet.csr .

# To set up a new volume on AWS:
# Use the AWS web interface to find the volume and attach it to the instance.
# Use ls to find the device name, which will be /dev/sdf or /dev/xvdf
To see if it has a file system, do
# sudo file -s <device name>
# If it needs a file system, do
sudo mkfs -t ext4 <device name>
# Make a mount point
sudo mkdir /cosheet
# Mount the file system
sudo mount <device name> /cosheet
# eg
  sudo mount /dev/xvdf /cosheet
# Make it writable by all users
sudo chmod u+rwx /cosheet
# To make it mount automatically, see step 7 here
  https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html

# To update my amazon server
sudo apt-get update && sudo apt-get upgrade
