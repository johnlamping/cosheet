* {
    border-style: solid;
    border-width: 0px;
    border-color: hsl(0, 0%, 80%);
    box-sizing: border-box;
    background-color: transparent;
}

body {
    margin-top: -2px;  /* keep from having scrollbar */
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow-y: hidden;
}

#app {
    flex: 0 1 auto;
    display: flex;
    flex-direction: row;
    min-height: 10px; /* So it will shrink to the screen height */
}

#root {
    width: 100vw;
    display: flex;
    flex-direction: column
}

#root > .table {
    max-width: 100%;
    padding-right: 10px;
    min-height: 10px; /* So it will shrink to the screen height */
}

#root.wrapped-element, #root.item {
    width: 100%;
    flex: 0 1 auto;
    overflow-x: hidden;
    overflow-y: auto;
    margin: 0;
}

/* need to override box shadow for selectors */
.selected.selected.selected.selected {
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
    border-radius: 5px;
}

/* In general, if there is a border, there is a matching negative margin
   on the right and bottom. That allows boxes to stack. Containment may
   require additional negative margins on the top and left.

   Usually, the border is set by the containing DOM element, but sometimes
   it is set explicitly. */
.bordered {
    border-width: 2px;
    margin: 0px -2px -2px 0px;
}

/* --- Generic indentation --- */

.indent-wrapper {
    display: flex;
    flex-direction :column;
    padding-left: 8px;
}

.indent-wrapper > * {
    flex-grow: 1;
}

/* --- Basic items and stacks of items --- */

.item.editable, .item > .editable { 
    padding: 3px;
}

.item.with-elements > :last-child {
    margin: 0px 5px 5px 6px;
}

.editable {
    min-height: 15px; /* Make no-content cells have minimum height */
    min-width: 7px;
    font-size: small;
}

/* Override other min-width values. */
.content-text.content-text.content-text.content-text {
    min-height: 25px;
    min-width: 50px;
    overflow-wrap: break-word;
    font-family: sans-serif;
}

/* Override other min-width values. */
.content-text.content-text.content-text.content-text.placeholder {
    min-height: 14px;
}

.content-text.placeholder {
    height: 13px;
    min-height: 0px;
    line-height: 0px;
    flex-grow: 0;
    padding: 0;
    overflow-wrap: break-word;
}

/* grayish indicators of places where there is no current content */
.editable:not(.content-text) {
    background-color: hsl(0, 0%, 95%);
}

.vertical-stack > .item {
    margin: 0px 3px 0px 3px;
}

.vertical-item-stack > .item.editable, .vertical-stack > .item > .editable { 
    padding: 3px 0px 3px 0px;
}

.vertical-stack > .item.with-elements > :last-child {
    margin: 0px 2px 5px 3px;
}

.vertical-stack > .item + .item {
    border-width: 1px 0px 0px 0px;
}

.for-multiple, .for-multiple > .vertical-item-stack {
    vertical-align: middle;
}

.vertical-stack {
    vertical-align: top;
}

.with-elements {
    text-align: left;
}

.elements-wrapper {
    padding: 3px 3px 3px 5px;
}

.horizontal-stack {
    display: flex; /* horizontal is default */
}

.horizontal-stack > *:not(:last-child) {
    margin-right: 2px;
}

.horizontal-stack > .item + .item {
    border-width: 0px 0px 0px 1px;
}

.horizontal-stack > .vertical-labels-element,
.horizontal-stack > .wrapped-element {
    display: flex;
    flex-direction: column;
}

.horizontal-stack > .vertical-labels-element > :first-child,
.horizontal-stack > .wrapped-element > :first-child {
    flex: 1;
}

/* --- tabs --- */

.tabbed {
    display: flex;
    flex-direction: column;
    min-height: 10px;  /* So it will shrink to the screen height */
}

.tabs-wrapper {
    display: block;
}

.tabs-holder, .tab-sequence {
    vertical-align: bottom;
    flex: none;
    display: inline-flex;
    align-items: flex-end;
    z-index: 1;  /* Make the ::before and ::after borders go in front */
    position:relative;  /* Make the z-index effective */
    /* The tabs are give in reverse order, so the logically first tab will
       come on top in the stacking order. */
    flex-direction: row-reverse;
    justify-content: flex-end;
}

.tabs-holder {
    margin-left: 3px; /* For left end of first tab */
}

.tab-tree {
    background-color: white;
}

.multi-tab {
    text-align: center;
}

.tab {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    text-align: center;
    border-top-width: 2px;
    box-shadow: 0px 2px hsl(0, 0%, 80%);
    margin-left: 12px;
    margin-right: 12px;
    min-width: 20px;
    width: fit-content;
    position: relative;
}

.tab::before, .tab::after{
    height: 100%;
    /* Make its background override edges of on other tabs, but not content. */
    width: 30px;
    background-color: white;
    z-index: -1;    
    border-style: solid;
    border-color: hsl(0, 0%, 80%);
    box-shadow: inset 0px -1px 0px 0px hsl(0, 0%, 80%);
    display: block;
    content:" ";
    top: -2px;
    position: absolute;
    transform-origin: top;
}

.tab::before {
    border-width: 2px 0px 1px 2px;
    border-top-left-radius: 7px;
    left: -8px;
    transform:skewX(-15deg);
}

.tab::after {
    border-width: 2px 2px 1px 0px;
    border-top-right-radius: 7px;
    right: -8px;
    transform:skewX(15deg);
}

.tab.vertical-stack {
    /* Leave room for selection box-shadow. */
    padding-top: 2px;
}

.tab.empty-child.empty-child.empty-child.empty-child {
    background-color: transparent;
    width: 40px;
}

.tab.virtualTab, .tab.virtualTab::before, .tab.virtualTab::after { 
     background-color: hsl(0, 0%, 95%);
}

.tab.virtualTab {
    position: relative;
}

.tab.complex {
    background-color: transparent;
    width: 150px;
}

.tab.chosen, .tab-tree.chosen {
    z-index: 2;
}

.tab.chosen {
    box-shadow: inset 0px 2px 2px hsl(0, 0%, 80%),
                0px 2px hsl(0, 0%, 100%);
    border-bottom: 0px;
}

/* Keep the content of a tab from hiding the inset box-shadow if it 
   gets chosen */
.tab.with-elements > :first-child.content-text {
    padding-top: 0px;
    margin-top: 3px;
}

.tab.chosen.selected.selected.selected.selected {
    box-shadow: inset 0px 2px 2px hsl(0, 0%, 80%),
    0px 2px hsl(0, 0%, 100%),
    inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}

 /* Put the selected box shadow on the select holder, because the :left and
    :right of the tab can overlap its contents. */
.tab.chosen > .select_holder {
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}

.tab.chosen::before {
    box-shadow: 2px 4px 0px -2px hsl(0, 0%, 100%),
                inset 2px 2px 2px hsl(0, 0%, 80%);
    border-bottom: 0px;
}

.tab.chosen::after {
    box-shadow: -2px 4px 0px -2px hsl(0, 0%, 100%),
                inset -2px 2px 2px hsl(0, 0%, 80%);
    border-bottom: 0px;
}

/* batch editing */

.quit-batch-edit.tool {
    font-size: 20px;
    width: auto;
    height: auto;
    text-align: center;
    background-color: hsl(0, 0%, 95%);
    border-width: 1px;
    border-radius: 2px;
    border-color: hsl(0, 0%, 75%);
    padding: 0px 2px 0px 2px;
    margin: 0px 7px 2px 7px;
    display: inline-block;
}

/* Three copies, so our definition of margin wins out. */
.batch-stack.batch-stack.batch-stack {
    box-shadow: 0 0 0 2px hsl(220, 100%, 70%),
                4px 4px white, 6px 6px hsl(220, 70%, 65%),
                8px 8px white, 10px 10px hsl(220, 40%, 60%);
    margin: 10px 16px 16px 8px;
    z-index: 1;
}

.batch-query-match-counts {
    margin-top: 4px;
    margin: 4px 8px 4px 6px;
    text-align: center;
    color: hsl(220, 100%, 45%);
    font-weight: bold;
}

.batch-stack-wrapper.batch-stack-wrapper.batch-stack-wrapper.batch-stack-wrapper {
    background-color: hsl(0, 0%, 95%);
    margin-top: 2px;
    border-width: 2px;
    border-radius: 7px;
    border-color: hsl(0, 0%, 80%);
}

.horizontal-labels-element.narrow.narrow.narrow.batch-stack > * {
    margin-bottom: 0px;
}

.horizontal-labels-element.narrow.narrow.narrow.batch-stack > :last-child {
    margin-right: 0px;
}

.batch-stack {
    border-width: 2px;
    border-top-left-radius: 7px;
    border-bottom-left-radius: 7px;
}

.batch-stack > :first-child {
    border-top-left-radius: 7px;
    border-bottom-left-radius: 7px;
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

/* --- labels --- */

.label {
    background-color: hsl(194, 100%, 88%);
}

.label > .label.label.label {
    background-color: transparent;
}

.item:not(.label), .content-text:not(.label), .vertical-stack:not(.label) {
    background-color: white;
}

.label.virtual.virtual.virtual.virtual:not(.merge-with-parent),
.label.virtual:not(.merge-with-parent)+.indent-wrapper {
    background-color: hsl(194, 50%, 88%);
}

/* --- label-element pairs: one column format --- */

.horizontal-labels-element {
    display: flex;
    flex-direction: row;
}

.horizontal-labels-element.narrow > * {
    border-width: 2px;
    margin-right: -2px;
    margin-bottom: -2px;
}

.horizontal-labels-element.narrow > :first-child {
    border-bottom-left-radius: 7px;
    border-top-left-radius: 7px;
}

.horizontal-labels-element.narrow > :first-child {
    width: 12px;
}

.horizontal-labels-element.narrow > :last-child {
    flex: 1;
}

.wrapped-element:not(.merge-with-parent) {
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    border-bottom-left-radius: 7px;
    border-width: 2px;
    margin: 0px -2px -2px 0px;
    background-image:
    linear-gradient(to left,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.vertical-stack.has-border > .wrapped-element {
    margin-left: -2px;
}

.vertical-stack.has-border > .wrapped-element:first-child {
    margin-top: -2px;
}

.wrapped-element > .indent-wrapper {
    flex-grow: 0;
}

.indent-wrapper > * {
    border-width: 2px;
    margin-bottom: -2px;
    margin-right: -2px;
}

.vertical-stack > .wrapped-element:last-child {
    display: flex;
    flex-direction: column;
}

.wrapped-element ~ .horizontal-labels-element {
    margin-top: 2px;
}

/* --- label-element pairs: two column format --- */

.horizontal-labels-element.wide > :last-child {
    width: 70%;
    border-width: 2px;
    margin: 0px 0px -2px 0px;
}

.horizontal-value-last {
    border-bottom-width: 2px;
    display: flex;
    flex-direction: row;
}

.horizontal-value-last > .vertical-stack,
.horizontal-value-last > .content-text,
.horizontal-value-last > .horizontal-value-last {
    width: 100%;
}

.horizontal-labels-element.wide > :last-child.horizontal-value-last {
    border-bottom-width: 4px;
}

.vertical-stack.has-border > .horizontal-labels-element {
    margin-left: -2px;
}

.vertical-stack.has-border > .horizontal-labels-element:first-child {
    margin-top: -2px;
}


.horizontal-header {
    flex: 1;
    display: flex;
    flex-direction: row;
    border-left-width: 2px;
}

.horizontal-header > :first-child {
    flex: 1;
}

.horizontal-header.indent {
    padding-left: 8px;
}

.horizontal-header.top-border.bottom-border {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    text-align: right;
    border-top-width: 2px;
    border-bottom-width: 2px;
    margin-bottom: -2px;
    border-top-left-radius: 7px;
    border-bottom-left-radius: 7px;
}

.horizontal-header.top-border, .query-holder{
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    border-top-width: 2px;
    border-top-left-radius: 7px;
}

.horizontal-header.bottom-border {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to top,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
    border-bottom-width: 2px;
    margin-bottom: -2px;
    border-bottom-left-radius: 7px;
}

.horizontal-header.bottom-border.indent > .horizontal-header {
    margin-bottom: 0px;
}

.horizontal-header{
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

/* Label pairs, horizontal format */

.vertical-labels-element {
    border-width: 2px;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
}

.vertical-labels-element > * {
    min-width: 20px;
}

.vertical-labels-element > :first-child {
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    border-bottom-width: 2px;
}

.horizontal-labels-element > .elements-wrapper {
    border-left-width: 2px;
    flex-grow: 1;
    display: flex;
}

/* --- tables --- */

.query-condition {
    flex: none;
    display: flex;
    border-width: 2px;
    border-radius: 7px;
    min-width: 300px;
    flex: 1 0 auto;
    position: relative;
    box-shadow: 3px 5px 5px 0px grey;
    margin-right: 3px;
    margin-bottom: 3px;
    z-index: 1;
}

.query-condition > *:first-child {
    min-width: 50px;
    font-size: 115%;
    padding-right: 10px;
    padding-left: 6px;
}

.query-condition.horizontal-labels-element > *:nth-child(2) {
    margin-left: 10px;
}

/* Make the following ::before elements positionable */
.table-header, .query-holder {
    position: relative;
}

.table-header::before, .query-condition:before {
    box-shadow: inset -5px 5px 5px 5px hsla(0, 0%, 100%, 0.6),
                inset 5px -5px 10px 0px hsla(0, 0%, 0%, 0.2);
    display: inline-block;
    content:" ";
    top: 0px;
    bottom: 0px;
    left: 0px;
    right: 0px;
    position: absolute;
    z-index: 1;
    border-radius: 5px;
    pointer-events: none;
}

/* Merge the border of the wrapped element with the query-holder border. */
.wrapped-element.query-condition {
    margin-left: -5px;
    margin-top: -2px;
}

.query-result-wrapper {
    flex: 0 1 auto;
    display: flex;
    min-height: 10px; /* So it will shrink to the screen height */
}

.query-result-indent {
    width: 7px;
    border-left-width: 2px;
    border-right-width: 2px;
    border-bottom-width: 2px;
    border-bottom-left-radius: 7px;
    margin-bottom: 0px;
}

.query-result-wrapper > :last-child {
    padding-top: 1px;
    padding-left: 1px;
    padding-right: 2px;
    background-color: hsl(0, 0%, 80%);
}

.table {
    display: flex;
    flex-direction: column;
    width: fit-content;
    min-height: 10px; /* So it will shrink to the screen height */
}

.table-main {
    min-width: 300px;
    /* So we can find the position of elements relative to this node 
    for horizontal scrolling */
    position: relative;
    flex: 0 1 auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    overflow-x: auto;
    overflow-y: hidden;
    margin-left: 3px;
}

.table-rows {
    flex: 0 1 auto;
    /* Wants to be visible, but that gets turned into auto */
    overflow-x: hidden;
    overflow-y: scroll;
    padding-right: 2px; /* Room for the column's margin. */
    /* So we can find the position of elements relative to this node 
    for vertical scrolling */
    position: relative;
    min-height: 10px; /* So it will shrink to the screen height */
}

.table-rows > :first-child {
    margin-top: -2px;
}

.column-header-sequence, .horizontal-label-sequence {
    flex: none;
    display: flex;
    align-items: stretch;
}

.table-main > .column-header-sequence {
    border-bottom-width: 2px;
}

.column-header-sequence > *, .horizontal-label-sequence > * {
    flex: 0 0 auto;
}

.column-header > .column-header-sequence
   > .editable.editable.editable.editable.editable:not(.content-text) {
    background-color: transparent;
}

.column-header:not(.label):not(.virtual-column) {
    background-color: white;
}

.column-header {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    text-align: center;
    margin-right: -2px;
}

.column-header.leaf {
    width: 150px;
}

.column-header:not(.merge-with-parent) {
    border-width: 2px;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    margin: 0px -2px -2px 0px;
    min-height: 25px;
}

.column-header.wrapped-element:not(.merge-with-parent) {
    border-bottom-left-radius: 0px;
}

.column-header.merge-with-parent {
    padding: 2px; /* positions inside stuff as if there were a border */
    margin: 0px -2px -2px 0px;
    min-height: 25px;
}


/* Make the header fill all the available space, for a better selection box. */
.column-header > :first-child.editable {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    flex-grow: 1;
    flex-basis: auto;
}

.column-header.with-children {
    border-bottom-width: 0px;
}
 
.column-header > .column-header,
.column-header > .wrapped-element,
.column-header > .column-header-sequence > :first-child {
    margin-left: -2px;
}

.column-header > .wrapped-element,
.column-header > .column-header:first-child {
    margin-top: -2px;
}

.column-header:not(.merge-with-parent).label, .query-holder.label,
.vertical-labels-element > :first-child {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to left,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0)),
    linear-gradient(to bottom,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.column-header.merge-with-parent.label {
    background-color: transparent;
}

.column-header.horizontal-labels-element {
    display: flex;
    flex-direction: row;
    background-color: transparent;
}

.column-header.horizontal-labels-element > * {
    margin-top: -2px;
}

.column-header > .horizontal-labels-element {
    margin-top: -2px;
    margin-left: -2px;
}

.column-header > .wrapped-element:first-child {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

.column-header > .horizontal-labels-element:first-child {
    flex-grow: 1;
}

.column-header > .horizontal-labels-element > * {
    display: flex;
    align-items: flex-end;
}

.column-header > .horizontal-labels-element > :last-child {
    justify-content: center;
}

.column-header.horizontal-labels-element > :first-child {
    margin-left: -2px;
}

.column-header.horizontal-labels-element > :last-child {
    border-top-right-radius: 7px;
}

.query-result-indent.label {
    background-image:
    linear-gradient(to right,
                    hsla(0, 0%, 100%, .7),
                    hsla(0, 0%, 100%, 0) 7px,
                    hsla(0, 0%, 100%, 0));
}

.table-row {
    display: flex;
    align-items: stretch;
}

.table-rows > :last-child > .table-cell {
    margin-bottom: 0px;
}

.table-cell {
    width: 150px;
    min-height: 20px;
    flex: none;
    display: flex;
    flex-direction: column;
    border-width: 2px;
    margin: 0px -2px -2px 0px;
}

.wrapped-element.table-cell > .indent-wrapper {
    flex-grow: 1;
}

.virtual-column {
    width: 35px;
}

.virtual-column.selected {
    width: 200px;
}

/* --- toolbar --- */

.toolbar {
    flex: none;
    background-color: hsl(0, 0%, 97%);
    width: 100%;
    padding-top: 6px; /* Make up for the -2px on body */
    padding-bottom: 4px;
    padding-left: 10px;
    margin-bottom: 5px;
    border-color: hsl(0, 0%, 75%);
    border-width: 0px 0px 1px 0px;
}

.link {
    display: inline-block;
    font-family: arial,sans-serif;
    font-size: 14px;
    margin-left: 4px;
    float: right;
}

.tool {
    position: relative;
    height: 34px;
    width: 34px;
    font-size: 20px;
    text-align: center;
    vertical-align: top;
    background-color: hsl(0, 0%, 95%);
    border-width: 1px;
    border-radius: 2px;
    border-color: hsl(0, 0%, 75%);
    margin: 0px 7px 0px 7px;
    display: inline-block;
}

.toolgap {
    width: 20px;
    display: inline-block;
}

.tooltip {
    visibility: hidden;
    background-color: hsl(0, 0%, 40%);
    font-size: 100%;
    box-sizing: content-box;
    width: max-content;
    max-width: 120px;
    color: #fff;
    text-align: center;
    padding: 2px 4px;
    border-radius: 6px;
 
    /* Position the tooltip text */
    position: absolute;
    top: 100%;
    left: 50%; /* 50% here is the container's width. */
    transform: translate(-50%, 5px); /* 50% here is the tip's width. */
    z-index: 2;
}

/* Make a triangle for the tooltip by adding one more thing after the text,
   which will consist of only border with only one side non-transparent. */
.tool .tooltip::after, .selection .tooltip::after {
    content: " ";
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent hsl(0, 0%, 40%) transparent;
    position: absolute;
    top: -10px; /* Above the top of the tooltip */
    left: 50%;
    margin-left: -5px;
}

.tool:hover{
    background-color: hsl(0, 0%, 97%);
    border-color: hsl(0, 0%, 60%);
    border-width: 2px;
    border-radius: 3px;
}

.tool:hover > img {
    margin: -1px 0px 0px -1px;
}

/* Show the tooltip text when you mouse over the tool */
.tool:hover .tooltip, .selection:hover .tooltip {
    visibility: visible;
    transition-delay: 1s;
}

/* --- alternate interpretation link --- */

#alternate_interpretation_holder {
    visibility: hidden;
    position: absolute;
    top: 0;
    left: 50%; /* 50% here is the container's width. */
    transform: translate(-50%, 0px); /* 50% here is the link's width. */
    z-index: 1;
    background-color: cornsilk;
    border-width: 1px;
    border-color: orange;
    border-radius: 3px;
    font-family: sans-serif;
    font-size: 100%;
    font-weight: bold
    box-sizing: content-box;
    width: max-content;
    text-align: center;
    padding: 2px 4px;
}

#alternate_interpretation_holder > * {
    display: inline-block;
    margin-left: 1ex;
}

#alternate_interpretation {
    color: blue;
    text-decoration: underline;
}

#alternate_interpretation:hover {
    cursor: pointer;
}

#alternate_interpretation_holder.visible {
    visibility: visible;
}

/* --- select holder --- */

.editable {
    position: relative; /* To make select_holder position relative to it */
}

#select_holder {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1; /* To allow overflow content to cover adjacent cells */
}

/* Match the size of the containing box, so the scope tools will
   be positioned properly relative to the containing box, and so we won't
   capture clicks on other boxes. */
.editable > #select_holder {
    display: flex;
    width: 100%;
    height: 100%;
}

#select_holder.editing {
    background-color: cornsilk;
    box-shadow: 5px 5px 3px grey;
    min-width: 200px;
    min-height: fit-content;
}

#edit_input {
    display: none;
    flex-grow: 1;
    font-size: 100%;
    height: auto;
    resize: none;
}

#select_holder.editing > #edit_input {
    display: block;
    box-shadow: inset 0 0 5px 3px hsla(220, 100%, 55%, 1);
}


